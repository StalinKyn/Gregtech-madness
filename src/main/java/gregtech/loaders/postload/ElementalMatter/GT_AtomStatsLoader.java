package gregtech.loaders.postload.ElementalMatter;import gregtech.api.objects.elementalmatter.GT_AtomStats;import gregtech.api.util.GT_Log;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.InputStreamReader;import java.io.OutputStreamWriter;public class GT_AtomStatsLoader implements  Runnable {    @Override    public void run() {        String line = "";        try {            BufferedReader br = new BufferedReader(new InputStreamReader(GT_AtomStatsLoader.class.getResourceAsStream("Atoms.csv")));            br.readLine();            while((line=br.readLine())!=null) {                String[] split= line.split(";",-1);                if(split.length!=10) {                    throw new Error("Invalid count (" + split.length + ") of separators in Atoms.csv " + line);                }                if(split[9].equals(""))                    split[9] = "123";                new GT_AtomStats(split[0],Short.parseShort(split[1]),Short.parseShort(split[2]),Double.parseDouble(split[3]),split[4].equals("s")?Double.MAX_VALUE:Double.parseDouble(split[4]), getDecayModes(split[5]), getDecayChances(split[5]), split[7].equals("")?0f:Float.parseFloat(split[7]),split[9].equals("")?0L:Long.parseLong(split[9]));            }        }        catch (Exception e){            e.printStackTrace();        }        finally {            GT_Log.out.println("Successfully loaded all isotope definitions");        }    }    public String[] getDecayModes(String aLine){        if(aLine==null||aLine.length()==0||aLine.equals("s"))            return new String[0];        if(!aLine.contains("|"))            return new String[]{aLine};        String[] split = aLine.split("[|]");        String[] aReturn = new String[split.length];        for(short i = 0; i < split.length; i ++){            aReturn[i] = split[i].split(":")[0];        }        return aReturn;    }    public float[] getDecayChances(String aLine) {        if(aLine==null||aLine.length()==0||aLine.equals("s"))            return new float[0];        if(!aLine.contains("|"))            return new float[]{1f};        String[] split = aLine.split("[|]");        float[] aReturn = new float[split.length];        for(short i = 0; i < split.length; i ++){            aReturn[i] = Float.parseFloat(split[i].split(":")[1]);        }        return aReturn;    }}