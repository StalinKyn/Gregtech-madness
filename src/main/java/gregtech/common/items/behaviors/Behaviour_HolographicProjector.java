package gregtech.common.items.behaviors;import gregtech.api.GregTech_API;import gregtech.api.interfaces.IItemBehaviour;import gregtech.api.interfaces.metatileentity.IGuideRenderer;import gregtech.api.interfaces.metatileentity.IProjectable;import gregtech.api.interfaces.tileentity.IGregTechTileEntity;import gregtech.api.items.GT_MetaBase_Item;import gregtech.api.objects.GT_GuideRendererParticle;import gregtech.api.util.GT_LanguageManager;import gregtech.api.util.GT_Multiblock_Utility;import gregtech.api.util.GT_Utility;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.entity.player.EntityPlayerMP;import net.minecraft.item.ItemStack;import net.minecraft.tileentity.TileEntity;import net.minecraft.world.World;import java.util.ArrayList;import java.util.List;public class Behaviour_HolographicProjector extends Behaviour_None implements IGuideRenderer {    private final String mTooltip = GT_LanguageManager.addStringLocalization("gt.behaviour.projecting", "Can create Hologram Project of GT multiblock");    private boolean mCreative = false;    public Behaviour_HolographicProjector(boolean aCreative){        mCreative = aCreative;    }    public ArrayList<GT_GuideRendererParticle> mParticles = new ArrayList<>();    public boolean onItemUseFirst(GT_MetaBase_Item aItem, ItemStack aStack, EntityPlayer aPlayer, World aWorld, int aX, int aY, int aZ, int aSide, float hitX, float hitY, float hitZ) {        GT_Utility.sendChatToPlayer(aPlayer,"Player EntityMP "+(aPlayer instanceof  EntityPlayerMP));        if ((aPlayer instanceof EntityPlayerMP)) {            TileEntity tTileEntity = aWorld.getTileEntity(aX, aY, aZ);            GT_Utility.sendChatToPlayer(aPlayer,"Not a "+(tTileEntity==null)+" "+(!(tTileEntity instanceof IGregTechTileEntity)||!(((IGregTechTileEntity) tTileEntity).getMetaTileEntity()instanceof IProjectable)));            if(!(tTileEntity instanceof IGregTechTileEntity)||!(((IGregTechTileEntity) tTileEntity).getMetaTileEntity()instanceof IProjectable) ){                GT_Utility.sendChatToPlayer(aPlayer,"Not a projectable machine");                if(aPlayer.isSneaking()){                    for(GT_GuideRendererParticle mParticle:mParticles){                        mParticle.setDead();                    }                }                return false;            }            IProjectable tMachine = (IProjectable)((IGregTechTileEntity) tTileEntity).getMetaTileEntity();            String[][] tProject = tMachine.GetStructure();            int energyConsume =tProject.length*tProject[0].length*tProject[0][0].length()*1000;            System.out.println(" ыва "+aItem.use(aStack, energyConsume, aPlayer));            if(aItem.use(aStack, energyConsume, aPlayer)){                tMachine.RenderStructure(mCreative&&aPlayer.isSneaking(),this, new int[]{0,0,0});            }            else{                GT_Utility.sendChatToPlayer(aPlayer,"Not enough energy");            }        }        return false;    }    public List<String> getAdditionalToolTips(GT_MetaBase_Item aItem, List<String> aList, ItemStack aStack) {        aList.add(this.mTooltip);        return aList;    }    @Override    public ArrayList<GT_GuideRendererParticle> getParticleArray() {        return mParticles;    }}